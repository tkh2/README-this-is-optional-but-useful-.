<!Doctype html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>LONER TO DO LIST</title>
        <link rel="stylesheet" href="lazy.css">
 </head>
 <body>
    <div class="App-container">
        <h1>LONER TO DO LIST</h1>

        <input type="text" id="taskInput" placeholder="Enter a new task">
        <button id="addButton">Add task</button>
        <ul id="taskList">

        </ul>
    </div>
 </body>
 <script>
   // Get references to HTML elements
const taskInput = document.getElementById("taskInput");
const addButton = document.getElementById("addButton");
const taskList = document.getElementById("taskList");

// Function to add a task
function addTask() {
    const taskText = taskInput.value.trim();
    if (taskText === "") {
        alert("Enter the task");
        return;
    }

    // Create a new <li> element
    const li = document.createElement("li");

    // Add the text to the list item
    li.innerHTML = `${taskText} <button class="delete-btn">Delete</button>`;

    // Add event listener to toggle completion when clicked
    li.addEventListener("click", function() {
        li.classList.toggle("completed");
        saveTasks();  // Save tasks after every update
    });

    // Add event listener for delete button
    const deleteBtn = li.querySelector(".delete-btn");
    deleteBtn.addEventListener("click", function(event) {
        event.stopPropagation(); // Prevent triggering the click event for the task itself
        li.remove();
        saveTasks();  // Save tasks after deleting
    });

    // Append the new task to the task list
    taskList.appendChild(li);

    // Clear the input field after adding the task
    taskInput.value = "";

    // Save tasks to localStorage
    saveTasks();
}

// Function to save tasks to localStorage
function saveTasks() {
    const tasks = [];
    document.querySelectorAll("li").forEach((taskElement) => {
        const task = {
            text: taskElement.innerText.replace("Delete", "").trim(),
            completed: taskElement.classList.contains("completed")
        };
        tasks.push(task);
    });
    localStorage.setItem("tasks", JSON.stringify(tasks));
}

// Function to load tasks from localStorage
function loadTasks() {
    const savedTasks = JSON.parse(localStorage.getItem("tasks"));
    if (savedTasks) {
        savedTasks.forEach(task => {
            addTaskToDOM(task.text, task.completed);
        });
    }
}

// Function to add a task to the DOM (used for loading from localStorage)
function addTaskToDOM(taskText, completed = false) {
    const li = document.createElement("li");
    li.innerHTML = `${taskText} <button class="delete-btn">Delete</button>`;

    if (completed) {
        li.classList.add("completed");
    }

    // Add event listener to toggle completion when clicked
    li.addEventListener("click", function() {
        li.classList.toggle("completed");
        saveTasks();  // Save tasks after every update
    });

    // Add event listener for delete button
    const deleteBtn = li.querySelector(".delete-btn");
    deleteBtn.addEventListener("click", function(event) {
        event.stopPropagation(); // Prevent triggering the click event for the task itself
        li.remove();
        saveTasks();  // Save tasks after deleting
    });

    // Append the task to the list
    taskList.appendChild(li);
}

// Event listener for the "Add Task" button
addButton.addEventListener("click", addTask);

// Optional: Allow the user to press "Enter" to add a task
taskInput.addEventListener("keypress", function(event) {
    if (event.key === "Enter") {
        addTask();
    }
});

// Load tasks when the page is loaded
window.onload = loadTasks;


 </script>

</html>


* {
     margin: 0;
     padding: 0;
     box-sizing: border-box;
}

body {
    font-family: Arial, sans-serif;
    display: flex;
    justify-content: center;
    height: 100vh;
    background-color: rgb(12, 12, 95);
    color: green;
}

.App-container {
    text-align: center;
    width: 300px;
    background-color: rgb(252, 238, 238);
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

.input {
    width: 80px;
    padding: 10px;
    margin-bottom: 10px;
    border-radius: 10px;
    border: 1px solid #ccc;
}

button {
    padding: 10px 15px;
    border: none;
    background-color: #4CAF50;
    color: white;
    cursor: pointer;
    border-radius: 4px;
}

button:hover {
    background-color: #45a049;
}

ul {
    list-style-type: none;
    padding: 0;
    margin-top: 20px;
}

li {
    display: flex;
    justify-content: space-between;
    align-items: center;
    background-color: #f9f9f9;
    padding: 10px;
    border-radius: 4px;
    margin-bottom: 5px;
}



